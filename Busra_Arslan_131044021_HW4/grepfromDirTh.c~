/*Busra Arslan*/
/*131044021   */
/*HW-4        */


//Signal
//Timer
//Thread 
//Fifo
//fork
//kaynak belirtmeyi unutma
//ctrl-c
 
#include <stdio.h>
#include <sys/wait.h> 
#include <stdlib.h>
#include <dirent.h>
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>
#include <pthread.h>
#include <signal.h>

#define MAX_PATH_SIZE 1024
#define Size 1000


//global variables
char *aranan_str;



//function prototype
int DirWalk(const char *path, int count_aranan, char aranan_str[], int *total);
void *counterOfString(void *);
//struct timespec start, stop;
int arananStringLength(int count_aranan);


int main(int argc, char *argv[])
{			
    int count_aranan=0;
    
	//struct timespec begin, end;
	
	int i=0, j=0;
    int total=0;
        
	if (argc != 3) {
	    printf("Usage: dirtree <path>\n");
	    exit(1);
	}
	
    count_aranan= strlen(argv[2]);
    aranan_str= (char*) malloc (sizeof(char) *count_aranan);
		
	for(j=0; j< count_aranan; ++j)   /*aranan string bir stringe atildi*/
	    aranan_str[j]=argv[2][j];

    
	//arananStringLength(count_aranan);
	//getString(count_aranan, aranan_str);

   
	
/*	int n_sec;
	if( clock_gettime( CLOCK_REALTIME, &begin) == -1 ) 
	{				
		perror( "clock gettime" );
		return EXIT_FAILURE;
	}*/

	
	i=DirWalk(argv[1], count_aranan, aranan_str, &total);		
	printf("%d\n",i);    //aranan toplam string sayisi
	
		
/*	if( clock_gettime( CLOCK_REALTIME, &end) == -1 )
    {			
        perror( "clock gettime" );
        return EXIT_FAILURE;
	}

	n_sec = ( end.tv_sec - begin.tv_sec )*1000000000
             + ( end.tv_nsec - begin.tv_nsec );
         
	
	printf("\n\nProgramın Çalışma Süresi:%d nanosaniye\n",n_sec);*/
	free(aranan_str);
	
	return 0;
} 

int arananStringLength(int count_aranan)
{
    return count_aranan;
}

/*
char* getString(int count_aranan, char aranan_str[])
{
    char *x;
    int j=0;
  
    x = (char*) malloc (sizeof(char) *count_aranan);
    
	for(j=0; j<count_aranan; ++j)  
        x[j]=aranan_str[j];
    
    return x;
    free(x);
}*/



int DirWalk(const char *path, int count_aranan,char aranan_str[],  int *total)						
{
	int i=0,status1=0,c=0,d=0, numberOfWord=0;
	int a=0;
	void *temp;
	char fname[MAX_PATH_SIZE];
	pid_t pid;
	
	char backup[Size][Size];
	struct dirent *dosya;																	
	struct stat status;
	DIR *dir;
	FILE* inp;
	
	
	if ((dir = opendir(path)) == NULL) {
		perror("opendir");
		exit(1);
	}
	

	while ((dosya = readdir(dir)) != NULL)
    {
		if (strcmp(dosya->d_name, ".") != 0 && strcmp(dosya->d_name, "..") != 0 ) 
		{          
		    /*girdiği klasörün içindeki dosyaları ve klasörlere bakıyor*/
		    /*eğer dosya görürse adını backup arrayinin içine atar klasörse fonksiyon*/
		    /*yeniden çağırılır.O klasörün içine girer ve aynı işlem yapılır*/
			i=strlen(dosya->d_name);
			sprintf(fname, "%s/%s", path, dosya->d_name);   //path >> fname
						
			if( dosya->d_name[i-1] != '~'  )
			{							
				if(dosya->d_type==DT_REG)   //file 
				{		
					strcpy(backup[status1],fname);   //file adi backup'a kopyalaniyor.
					status1++;
				}
				if(stat(fname, &status) == -1) 
				{                            
					perror("stat");                                  
					break;
				}
				if(S_ISDIR(status.st_mode))    //Directoryler icin fork
				{
				    
				    pid=fork();
				    if(pid==0)
				    {	
					    DirWalk(fname, count_aranan, aranan_str, total);		
					    exit(0);
				    }		
				    else{ 
					    wait(NULL);
				    }		
				}																		
			}					
		}
	}

    //////////////////////////////----THREAD ----/////////////////////////////////////
	pthread_t thread_id[status1];		

	for(c=0;c<status1;c++)
	{	
		inp=fopen(backup[c],"r");
		if(inp==NULL)
			printf("Dosya acilamadi.!!Hatali\n");
			
	    pthread_create( &thread_id[c], NULL, counterOfString, inp);	  //string sayisini bulan fonksiyonu cagirma		  				  
	}	

	for(d=0; d < status1; d++)
	{
        pthread_join( thread_id[d], &temp); 
        numberOfWord+=(int)(intptr_t)temp;
        a++;				 
	}					

printf("a>%d\n",a);
	closedir(dir);
	return numberOfWord;  //bulunan total string sayisi
}



//String dosyada kac kere gectigini bulan ,row ve col degerlerini 
//output dosyasina yazan fonksiyon
void *counterOfString(void *inp)
{	
    FILE *outp;
	int size=0,t=0,i=0,j=0,k=0,n=0;
	int count=0,bulma_sirasi=0,temp=0;
	int row_count=0, col_count=0;
	char ch;
	int count_str=0;
	int count_aranan;
    
	char* str;

    outp=fopen( "gfd.log" ,"a+");   /*output file*/ 
    
    count_str= arananStringLength(count_aranan);
    
     
	//Tum elemanlari tek boyutlu bir stringe atandi
    while(!feof(inp))
    {
        fscanf(inp,"%c", &ch); 
        ++size;
    }   
    rewind(inp);
    
    //Memoryden tek boyutlu string icin yer alma
    str = (char*) malloc (sizeof(char) *size+3);

    //Dosyadaki karakterleri dosya sonuna kadar okuyup stringe atmak
    while(!feof(inp))
    {
        fscanf(inp,"%c", &ch);       
        *(str)=ch;
        str[t+1]= *(str);
        ++t;
    }   

    //Search:Aranan stringi, stringin elamaninin 
    //ilk harfinin gectigi yeri bulma            
    while(i+1< size-2)
    {
        k=i;
        
        if(str[i+1] == aranan_str[0])
        {            
            while((aranan_str[j] == str[k+1]) && (j< count_str))
            {
                ++j;  ++k;                  
            } 
            if(j == count_str)
            {
                ++count;
                ++bulma_sirasi;
                //row
                for(n=0; n< i+1; ++n)
                {
                    if(str[n+1] == '\n'){
                        temp=n+1;
                        ++row_count;
                    }
                }
               //column
               if(temp != 0)
                   col_count= ((i+1) - temp - 1);
               else if(temp == 0)
                   col_count= (k - count_str);             
               
                //gfd.log dosyasina yazdirma
                fprintf(outp,"%d.  ", bulma_sirasi);
                fprintf(outp,"row: %d ", row_count+1);
                fprintf(outp,"col:%d \n", col_count+1);
                //gfd.log terminale yazdirma
                printf("%d.  ", bulma_sirasi);
                printf("row: %d ", row_count+1);
                printf("col:%d \n", col_count+1);
            }
       
            
            row_count=0;
            j=0;  k=0;
        }
        ++i;
    }
    

    fprintf(outp,"Aranan stringin dosyada gectigi sayi: %d \n\n", count); 
    printf("Aranan stringin dosyada gectigi sayi: %d \n", count);   
 
	
    count=0;
    i=0;  //while'da arttirilan size degeri icin her islem gordugu dosyadan once sifirlanir
    t=0;  //stringin size'i

    //memory free edilir ve dosyalar kapatilir
    free(str); 	   
    fclose(inp);
    fclose(outp);

    //Bu kaynaktan yararlanildi
    //http://sorucevap.netgez.com/sizet-vs-intptrt
	return (void*)(intptr_t) count;
	
}





